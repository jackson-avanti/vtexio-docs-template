export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  CustomFields: any;
  ProductCategories: any;
  AttachmentContent: any;
  ConnectorAdditionalData: any;
  JSONSchema: any;
  InputValues: any;
  Upload: any;
  DocumentV2: any;
  IOSanitizedString: any;
  IOUpload: any;
};

export type AddedOptionItem = {
  __typename?: 'AddedOptionItem';
  /** The OrderFormItem of this assembly options, as appering on cart */
  item?: Maybe<OrderFormItem>;
  /** Composition item of assembly option, as it appears on ItemMetadata of OrderForm */
  compositionItem?: Maybe<CompositionItem>;
  /** The quantity of this assembly option per parent unit, so childQuantity / parentQuantity */
  normalizedQuantity?: Maybe<Scalars['Int']>;
  /** The choice type of this assembly option (MULTIPLE, SINGLE or TOGGLE) */
  choiceType?: Maybe<Scalars['String']>;
  /** The real quantity added by user, so quantity in cart minus the item's initialQuantity */
  extraQuantity?: Maybe<Scalars['Int']>;
};

export type AdditionalInfo = {
  __typename?: 'AdditionalInfo';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type Address = {
  __typename?: 'Address';
  addressId?: Maybe<Scalars['String']>;
  cacheId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
  postalCode?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  addressName?: Maybe<Scalars['String']>;
  addressType?: Maybe<Scalars['String']>;
};

export type AddressInput = {
  receiverName?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
  postalCode?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  addressName?: Maybe<Scalars['String']>;
  addressType?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type AssemblyOption = {
  __typename?: 'AssemblyOption';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  composition?: Maybe<CompositionType>;
};

export type AssemblyOptionInput = {
  assemblyId: Scalars['String'];
  id?: Maybe<Scalars['ID']>;
  quantity?: Maybe<Scalars['Int']>;
  seller?: Maybe<Scalars['String']>;
  inputValues?: Maybe<Scalars['InputValues']>;
  options?: Maybe<Array<AssemblyOptionInput>>;
};

export type AssemblyOptionItem = {
  __typename?: 'AssemblyOptionItem';
  /** Assembly options added to parent OrderFormItem */
  added: Array<Maybe<AddedOptionItem>>;
  /** Assembly options removed from parent OrderFormItem */
  removed: Array<Maybe<RemovedOptionItem>>;
  /** Selling price of parent item */
  parentPrice?: Maybe<Scalars['Float']>;
};

export type Attachment = {
  __typename?: 'Attachment';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  required?: Maybe<Scalars['Boolean']>;
  domainValues?: Maybe<Array<Maybe<DomainValues>>>;
};


export type AttachmentResponse = {
  __typename?: 'AttachmentResponse';
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
};

/**  Benefit of a Product  */
export type Benefit = {
  __typename?: 'Benefit';
  /**  Flag which indicates if the benefit is featured or not  */
  featured?: Maybe<Scalars['Boolean']>;
  /**  Id of the product which the benefit is associated  */
  id?: Maybe<Scalars['String']>;
  /**  Name of the benefit  */
  name?: Maybe<Scalars['String']>;
  /**  Items of the benefit  */
  items?: Maybe<Array<Maybe<BenefitItem>>>;
  /**  Type of benefit  */
  teaserType?: Maybe<Scalars['String']>;
};

export type BenefitItem = {
  __typename?: 'BenefitItem';
  /**  Product itself  */
  benefitProduct?: Maybe<Product>;
  /**  IDs of the SKU Items that are taking part in the benefit  */
  benefitSKUIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**  Discount applied to the benefit product  */
  discount?: Maybe<Scalars['Float']>;
  /**  Minimum quantity of the benefit product that is required to validate the benefit  */
  minQuantity?: Maybe<Scalars['Int']>;
};

export type Brand = {
  __typename?: 'Brand';
  /**  slug is used as cacheId  */
  cacheId?: Maybe<Scalars['ID']>;
  /**  Brand id  */
  id?: Maybe<Scalars['Int']>;
  /**  Brand logo  */
  imageUrl?: Maybe<Scalars['String']>;
  /**  Text link */
  slug?: Maybe<Scalars['String']>;
  /**  Name of brand  */
  name?: Maybe<Scalars['String']>;
  /**  Title used by html tag */
  titleTag?: Maybe<Scalars['String']>;
  /**  Description used by html tag */
  metaTagDescription?: Maybe<Scalars['String']>;
  /**  Brand is active  */
  active?: Maybe<Scalars['Boolean']>;
};

export type BrandFacet = {
  __typename?: 'BrandFacet';
  /** @deprecated Use 'id' field instead */
  Id?: Maybe<Scalars['Int']>;
  /** @deprecated Use 'name' field instead */
  Name?: Maybe<Scalars['String']>;
  /** @deprecated Use 'quantity' field instead */
  Quantity: Scalars['Int'];
  /** @deprecated Use 'link' field instead */
  Link: Scalars['String'];
  /** @deprecated Use 'slug' field instead */
  Slug?: Maybe<Scalars['String']>;
  /** @deprecated Use 'children' field instead */
  Children?: Maybe<Array<Maybe<BrandFacet>>>;
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name: Scalars['String'];
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

export type BusinessHours = {
  __typename?: 'BusinessHours';
  /** Opening time in format HH:MM:SS */
  openingTime?: Maybe<Scalars['String']>;
  /** Day of the week representation, 0 for Sunday, 1 for Monday... */
  dayOfWeek?: Maybe<Scalars['Int']>;
  /** Closing time in format HH:MM:SS */
  closingTime?: Maybe<Scalars['String']>;
};

export type CategoriesTreeFacet = {
  __typename?: 'CategoriesTreeFacet';
  /** @deprecated Use 'id' field instead */
  Id?: Maybe<Scalars['Int']>;
  /** @deprecated Use 'name' field instead */
  Name?: Maybe<Scalars['String']>;
  /** @deprecated Use 'quantity' field instead */
  Quantity: Scalars['Int'];
  /** @deprecated Use 'link' field instead */
  Link: Scalars['String'];
  /** @deprecated Use 'slug' field instead */
  Slug?: Maybe<Scalars['String']>;
  /** @deprecated Use 'children' field instead */
  Children?: Maybe<Array<Maybe<CategoriesTreeFacet>>>;
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  /**  Contains slugified links according to the store structure. /:department/d, /:category/:subcategory, etc  */
  href: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  children?: Maybe<Array<Maybe<CategoriesTreeFacet>>>;
  selected: Scalars['Boolean'];
};

export type Category = {
  __typename?: 'Category';
  /**  id is used as cacheId  */
  cacheId?: Maybe<Scalars['ID']>;
  /**  URI of category  */
  href?: Maybe<Scalars['String']>;
  /**  Category text link  */
  slug?: Maybe<Scalars['String']>;
  /**  Category ID  */
  id?: Maybe<Scalars['Int']>;
  /**  Category name  */
  name?: Maybe<Scalars['String']>;
  /**  Title used by html tag */
  titleTag?: Maybe<Scalars['String']>;
  /**  Description used by html tag */
  hasChildren?: Maybe<Scalars['Boolean']>;
  /**  Has children categories  */
  metaTagDescription?: Maybe<Scalars['String']>;
  /**  Categories children  */
  children?: Maybe<Array<Maybe<Category>>>;
};

export type CheckoutSla = {
  __typename?: 'CheckoutSLA';
  cacheId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['String']>;
  deliveryChannel?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  shippingEstimate?: Maybe<Scalars['String']>;
  pickupStoreInfo?: Maybe<PickupStoreInfo>;
  pickupPointId?: Maybe<Scalars['String']>;
  pickupDistance?: Maybe<Scalars['Float']>;
};

export type ClientProfile = {
  __typename?: 'ClientProfile';
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  isCorporate?: Maybe<Scalars['Boolean']>;
  corporateDocument?: Maybe<Scalars['String']>;
  corporateName?: Maybe<Scalars['String']>;
  corporatePhone?: Maybe<Scalars['String']>;
  document?: Maybe<Scalars['String']>;
  documentType?: Maybe<Scalars['String']>;
  stateInscription?: Maybe<Scalars['String']>;
  tradeName?: Maybe<Scalars['String']>;
};

export type ClusterHighlight = {
  __typename?: 'ClusterHighlight';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type CompositionItem = {
  __typename?: 'CompositionItem';
  id?: Maybe<Scalars['ID']>;
  minQuantity?: Maybe<Scalars['Int']>;
  maxQuantity?: Maybe<Scalars['Int']>;
  initialQuantity?: Maybe<Scalars['Int']>;
  priceTable?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
};

export type CompositionType = {
  __typename?: 'CompositionType';
  minQuantity?: Maybe<Scalars['Int']>;
  maxQuantity?: Maybe<Scalars['Int']>;
  items?: Maybe<Array<Maybe<CompositionItem>>>;
};


export type CrossSelingInputEnum = 
  | 'buy'
  | 'similars'
  | 'view'
  | 'viewAndBought'
  | 'accessories'
  | 'suggestions';

export type CurrencyFormatInfo = {
  __typename?: 'CurrencyFormatInfo';
  currencyDecimalDigits?: Maybe<Scalars['Int']>;
  currencyDecimalSeparator?: Maybe<Scalars['String']>;
  currencyGroupSeparator?: Maybe<Scalars['String']>;
  startsWithCurrencySymbol?: Maybe<Scalars['Boolean']>;
};

export type CustomApp = {
  __typename?: 'CustomApp';
  fields?: Maybe<Scalars['CustomFields']>;
  id?: Maybe<Scalars['String']>;
  major?: Maybe<Scalars['Int']>;
};

export type CustomData = {
  __typename?: 'CustomData';
  customApps?: Maybe<Array<Maybe<CustomApp>>>;
};


export type DeliveryIds = {
  __typename?: 'DeliveryIds';
  courierId?: Maybe<Scalars['String']>;
  warehouseId?: Maybe<Scalars['String']>;
  dockId?: Maybe<Scalars['String']>;
  courierName?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
};

export type DeliverySlaPerTypes = {
  __typename?: 'DeliverySlaPerTypes';
  TypeName?: Maybe<Scalars['String']>;
  Price?: Maybe<Scalars['Float']>;
  EstimatedTimeSpanToDelivery?: Maybe<Scalars['String']>;
};

export type DeliverySlaSamples = {
  __typename?: 'DeliverySlaSamples';
  DeliverySlaPerTypes?: Maybe<Array<Maybe<DeliverySlaPerTypes>>>;
  Region?: Maybe<Region>;
};

export type DepartmentFacet = {
  __typename?: 'DepartmentFacet';
  /** @deprecated Use 'id' field instead */
  Id?: Maybe<Scalars['Int']>;
  /** @deprecated Use 'name' field instead */
  Name?: Maybe<Scalars['String']>;
  /** @deprecated Use 'quantity' field instead */
  Quantity: Scalars['Int'];
  /** @deprecated Use 'link' field instead */
  Link: Scalars['String'];
  /** @deprecated Use 'slug' field instead */
  Slug?: Maybe<Scalars['String']>;
  /** @deprecated Use 'children' field instead */
  Children?: Maybe<Array<Maybe<DepartmentFacet>>>;
  id: Scalars['ID'];
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

export type DeviceType = 
  | 'MOBILE'
  | 'TABLET'
  | 'DESKTOP';

/** Discount object */
export type Discount = {
  __typename?: 'Discount';
  /** Discount name */
  name?: Maybe<Scalars['String']>;
  /** Additional Info */
  additionalInfo?: Maybe<Array<Maybe<AdditionalInfo>>>;
};

export type DocProperty = {
  __typename?: 'DocProperty';
  name?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  optional?: Maybe<Scalars['Boolean']>;
};

export type Document = {
  __typename?: 'Document';
  /** id is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['String']>;
  fields?: Maybe<Array<Maybe<Field>>>;
};

export type DocumentInput = {
  fields?: Maybe<Array<Maybe<FieldInput>>>;
};

export type DocumentInputV2 = {
  document?: Maybe<Scalars['DocumentV2']>;
};

export type DocumentResponse = {
  __typename?: 'DocumentResponse';
  /** documentId is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
  documentId?: Maybe<Scalars['String']>;
};

export type DocumentResponseV2 = {
  __typename?: 'DocumentResponseV2';
  /** documentId is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  id?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
  documentId?: Maybe<Scalars['String']>;
};

export type DocumentSchema = {
  __typename?: 'DocumentSchema';
  name?: Maybe<Scalars['String']>;
  properties?: Maybe<Array<Maybe<DocProperty>>>;
  indexed?: Maybe<Array<Maybe<Scalars['String']>>>;
  security?: Maybe<VSecurity>;
  cache?: Maybe<Scalars['Boolean']>;
};

export type DocumentSchemaV2 = {
  __typename?: 'DocumentSchemaV2';
  schema?: Maybe<Scalars['JSONSchema']>;
};


export type DomainValues = {
  __typename?: 'DomainValues';
  FieldName?: Maybe<Scalars['String']>;
  MaxCaracters?: Maybe<Scalars['String']>;
  DomainValues?: Maybe<Scalars['String']>;
};

export type Facets = {
  __typename?: 'Facets';
  /** @deprecated Use 'departments' field instead */
  Departments?: Maybe<Array<Maybe<DepartmentFacet>>>;
  /** @deprecated Use 'brands' field instead */
  Brands?: Maybe<Array<Maybe<BrandFacet>>>;
  /** @deprecated Use 'specificationFilters' field instead */
  SpecificationFilters?: Maybe<Array<Maybe<FilterFacets>>>;
  /** @deprecated Use 'categoriesTrees' field instead */
  CategoriesTrees?: Maybe<Array<Maybe<CategoriesTreeFacet>>>;
  /** @deprecated Use 'priceRanges' field instead */
  PriceRanges?: Maybe<Array<Maybe<PriceRangesFacet>>>;
  departments?: Maybe<Array<Maybe<DepartmentFacet>>>;
  brands?: Maybe<Array<Maybe<BrandFacet>>>;
  specificationFilters?: Maybe<Array<Maybe<FilterFacets>>>;
  categoriesTrees?: Maybe<Array<Maybe<CategoriesTreeFacet>>>;
  priceRanges?: Maybe<Array<Maybe<PriceRangesFacet>>>;
  recordsFiltered?: Maybe<Scalars['Int']>;
};

export type Field = {
  __typename?: 'Field';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type FieldInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type FilterFacet = {
  __typename?: 'FilterFacet';
  /** @deprecated Use 'id' field instead */
  Id?: Maybe<Scalars['Int']>;
  /** @deprecated Use 'name' field instead */
  Name?: Maybe<Scalars['String']>;
  /** @deprecated Use 'quantity' field instead */
  Quantity: Scalars['Int'];
  /** @deprecated Use 'link' field instead */
  Link: Scalars['String'];
  /** @deprecated Use 'slug' field instead */
  Slug?: Maybe<Scalars['String']>;
  /** @deprecated Use 'children' field instead */
  Children?: Maybe<Array<Maybe<FilterFacet>>>;
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
};

export type FilterFacets = {
  __typename?: 'FilterFacets';
  name?: Maybe<Scalars['String']>;
  facets?: Maybe<Array<Maybe<FilterFacet>>>;
};

export type GeneralValueTeaser = {
  __typename?: 'GeneralValueTeaser';
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type HolidayHours = {
  __typename?: 'HolidayHours';
  /** date time in format HH:MM:SS */
  date?: Maybe<Scalars['String']>;
  /** hourBegin time in format HH:MM:SS */
  hourBegin?: Maybe<Scalars['String']>;
  /** hourEnd time in format HH:MM:SS */
  hourEnd?: Maybe<Scalars['String']>;
};

export type Image = {
  __typename?: 'Image';
  cacheId?: Maybe<Scalars['ID']>;
  imageId?: Maybe<Scalars['ID']>;
  imageLabel?: Maybe<Scalars['String']>;
  imageTag?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  imageText?: Maybe<Scalars['String']>;
};

/** Basic information that is displayed when is a impersonated session */
export type ImpersonatedUser = {
  __typename?: 'ImpersonatedUser';
  /** Profile information of impersonated user */
  profile?: Maybe<SessionProfile>;
};


export type Installment = {
  __typename?: 'Installment';
  Value?: Maybe<Scalars['Float']>;
  InterestRate?: Maybe<Scalars['Float']>;
  TotalValuePlusInterestRate?: Maybe<Scalars['Float']>;
  NumberOfInstallments?: Maybe<Scalars['Int']>;
  PaymentSystemName?: Maybe<Scalars['String']>;
  PaymentSystemGroupName?: Maybe<Scalars['String']>;
  Name?: Maybe<Scalars['String']>;
};

export type InstallmentsCriteria = 
  | 'MAX'
  | 'MIN'
  | 'ALL';



export type ItemAdditionalInfo = {
  __typename?: 'ItemAdditionalInfo';
  brandName?: Maybe<Scalars['String']>;
};

export type ItemInput = {
  itemId?: Maybe<Scalars['ID']>;
  sellers?: Maybe<Array<Maybe<SellerInput>>>;
};

export type ItemMetadata = {
  __typename?: 'ItemMetadata';
  items?: Maybe<Array<Maybe<ItemMetadataUnit>>>;
  priceTable?: Maybe<Array<Maybe<ItemPriceTable>>>;
};

export type ItemMetadataUnit = {
  __typename?: 'ItemMetadataUnit';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  skuName?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  refId?: Maybe<Scalars['String']>;
  ean?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  detailUrl?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
  assemblyOptions?: Maybe<Array<Maybe<AssemblyOption>>>;
};

export type ItemPriceTable = {
  __typename?: 'ItemPriceTable';
  type?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<PriceTableItem>>>;
};

export type Items = {
  __typename?: 'Items';
  thumb?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
  criteria?: Maybe<Scalars['String']>;
  slug?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
};


export type KitItem = {
  __typename?: 'KitItem';
  itemId?: Maybe<Scalars['ID']>;
  amount?: Maybe<Scalars['Int']>;
  product?: Maybe<OnlyProduct>;
  sku?: Maybe<Sku>;
};

/**  List of Products  */
export type List = {
  __typename?: 'List';
  /**  List's id  */
  id?: Maybe<Scalars['ID']>;
  /**  The list's name  */
  name?: Maybe<Scalars['String']>;
  /**  Flag that indicates if the list is public or not  */
  isPublic?: Maybe<Scalars['Boolean']>;
  /**  Flag that indicates if the list is editable or not  */
  isEditable?: Maybe<Scalars['Boolean']>;
  /**  List's owner  */
  owner?: Maybe<Scalars['String']>;
  /**  Creation date  */
  createdIn?: Maybe<Scalars['String']>;
  /**  Update date  */
  updatedIn?: Maybe<Scalars['String']>;
  /**  List items  */
  items?: Maybe<Array<Maybe<ListItem>>>;
};

export type ListInput = {
  /**  The list's name  */
  name: Scalars['String'];
  /**  Flag that indicates if the list is public or not  */
  isPublic?: Maybe<Scalars['Boolean']>;
  /**  Flag that indicates if the list is editable or not  */
  isEditable?: Maybe<Scalars['Boolean']>;
  /**  List's owner  */
  owner?: Maybe<Scalars['String']>;
  /**  List items  */
  items?: Maybe<Array<Maybe<ListItemInput>>>;
};

export type ListItem = {
  __typename?: 'ListItem';
  /**  Item id  */
  id?: Maybe<Scalars['ID']>;
  /**  Product id  */
  productId?: Maybe<Scalars['ID']>;
  /**  Sku id  */
  skuId?: Maybe<Scalars['ID']>;
  /**  The quantity of the item  */
  quantity?: Maybe<Scalars['Int']>;
  /**  The product's informations  */
  product?: Maybe<Product>;
  /**  Date when it was added  */
  createdIn?: Maybe<Scalars['String']>;
};

export type ListItemInput = {
  /**  List item id  */
  id?: Maybe<Scalars['ID']>;
  /**  Product id  */
  productId: Scalars['ID'];
  /**  Sku id  */
  skuId: Scalars['ID'];
  /**  The quantity of the item  */
  quantity?: Maybe<Scalars['Int']>;
};

export type LoginOptions = {
  __typename?: 'LoginOptions';
  /**  List of Social providers  */
  providers?: Maybe<Array<Maybe<Provider>>>;
  /**  Email and Password authentication  */
  classicAuthentication?: Maybe<Scalars['Boolean']>;
  /**  Access key through email Code verification  */
  accessKeyAuthentication?: Maybe<Scalars['Boolean']>;
};

export type LoginSession = {
  __typename?: 'LoginSession';
  id: Scalars['ID'];
  cacheId: Scalars['ID'];
  deviceType: DeviceType;
  city?: Maybe<Scalars['String']>;
  lastAccess: Scalars['String'];
  browser?: Maybe<Scalars['String']>;
  os?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  firstAccess: Scalars['String'];
};

export type LoginSessionsInfo = {
  __typename?: 'LoginSessionsInfo';
  currentLoginSessionId?: Maybe<Scalars['ID']>;
  loginSessions?: Maybe<Array<LoginSession>>;
};

export type LogisticsData = {
  __typename?: 'LogisticsData';
  /** Countries this store ships to */
  shipsTo?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Google Maps Geolocation API key */
  googleMapsKey?: Maybe<Scalars['String']>;
};

export type LogisticsInfo = {
  __typename?: 'LogisticsInfo';
  itemIndex?: Maybe<Scalars['String']>;
  selectedSla?: Maybe<Scalars['String']>;
  slas?: Maybe<Array<Maybe<ShippingSla>>>;
};

export type LogisticsItem = {
  __typename?: 'LogisticsItem';
  id?: Maybe<Scalars['String']>;
  requestIndex?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  seller?: Maybe<Scalars['String']>;
  sellerChain?: Maybe<Array<Maybe<Scalars['String']>>>;
  tax?: Maybe<Scalars['Int']>;
  priceValidUntil?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Int']>;
  listPrice?: Maybe<Scalars['Int']>;
  rewardValue?: Maybe<Scalars['Int']>;
  sellingPrice?: Maybe<Scalars['Int']>;
  measurementUnit?: Maybe<Scalars['String']>;
  unitMultiplier?: Maybe<Scalars['Int']>;
  availability?: Maybe<Scalars['String']>;
};

export type MessageFields = {
  __typename?: 'MessageFields';
  itemIndex?: Maybe<Scalars['String']>;
  ean?: Maybe<Scalars['String']>;
  skuName?: Maybe<Scalars['String']>;
};

export type MessageInfo = {
  __typename?: 'MessageInfo';
  code?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  fields?: Maybe<MessageFields>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Cart */
  addItem?: Maybe<OrderForm>;
  cancelOrder?: Maybe<Scalars['Boolean']>;
  updateItems?: Maybe<OrderForm>;
  /**
   * Used to update the CL entity on masterData.
   * This mutation is mostly used on the MyAccount app to update the customer's profile.
   * The user needs to be signed in or impersonated to perform this mutation.
   */
  updateProfile?: Maybe<Profile>;
  /**
   * Updates one address related to a customer profile. This is the AD entity on MasterData.
   * The user needs to be signed in or impersonated to perform this mutation.
   */
  updateAddress?: Maybe<Profile>;
  /**
   * Creates one address related to a customer profile. This is the AD entity on MasterData.
   * The user needs to be signed in or impersonated to perform this mutation.
   * @deprecated Prefer the saveAddress mutation instead.
   */
  createAddress?: Maybe<Profile>;
  /**
   * Add a new address to a customer profile. This is the AD entity on MasterData.
   * The user needs to be signed in or impersonated to perform this mutation.
   */
  saveAddress: Address;
  /**
   * Deletes an address related to a customer profile. This is the AD entity on MasterData.
   * The user needs to be signed in or impersonated to perform this mutation.
   */
  deleteAddress?: Maybe<Profile>;
  /**
   * Updates the Profile Picture by erasing the old ones DEPRECATED
   * @deprecated Field no longer supported
   */
  updateProfilePicture?: Maybe<Profile>;
  /**
   * Uploads the Profile Picture by appending to the existing ones DEPRECATED
   * @deprecated Field no longer supported
   */
  uploadProfilePicture?: Maybe<Profile>;
  /** Subscribe to newsletter */
  subscribeNewsletter?: Maybe<Scalars['Boolean']>;
  /** Order Form */
  updateOrderFormProfile?: Maybe<OrderForm>;
  updateOrderFormShipping?: Maybe<OrderForm>;
  updateOrderFormPayment?: Maybe<OrderForm>;
  updateOrderFormIgnoreProfile?: Maybe<OrderForm>;
  addOrderFormPaymentToken?: Maybe<OrderForm>;
  setOrderFormCustomData?: Maybe<OrderForm>;
  addAssemblyOptions?: Maybe<OrderForm>;
  updateOrderFormCheckin?: Maybe<OrderForm>;
  /** Payment */
  createPaymentSession?: Maybe<PaymentSession>;
  createPaymentTokens?: Maybe<Array<Maybe<PaymentToken>>>;
  setPlaceholder?: Maybe<Scalars['Boolean']>;
  /** Send access key to user email */
  sendEmailVerification?: Maybe<Scalars['Boolean']>;
  /** Access key sign in mode */
  accessKeySignIn?: Maybe<Scalars['String']>;
  /** Classic sign in mode */
  classicSignIn?: Maybe<Scalars['String']>;
  /** OAuth to login with Social Account */
  oAuth?: Maybe<Scalars['String']>;
  /** To recovery password you need to get your email, password and access code */
  recoveryPassword?: Maybe<Scalars['String']>;
  /** Change password using email and old password */
  redefinePassword?: Maybe<Scalars['String']>;
  /**
   * Invalidate VtexIdclientAutCookie
   * @deprecated See https://github.com/vtex-apps/store-graphql/issues/182
   */
  logout?: Maybe<Scalars['Boolean']>;
  /** Logs out from a specific login session */
  logOutFromSession?: Maybe<Scalars['ID']>;
  /** Impersonate a customer */
  impersonate?: Maybe<Session>;
  /** Depersonify a customer */
  depersonify?: Maybe<Scalars['Boolean']>;
  /** Document */
  createDocument?: Maybe<DocumentResponse>;
  updateDocument?: Maybe<DocumentResponse>;
  deleteDocument?: Maybe<DocumentResponse>;
  uploadAttachment?: Maybe<AttachmentResponse>;
  createDocumentV2?: Maybe<DocumentResponseV2>;
  /** List */
  createList?: Maybe<List>;
  /**
   *  Update the list informations and its items.
   * If the item given does not have the itemId, add it as a new item in the list.
   * If the item given has got an itemId, but its quantity is 0, remove it from the list.
   * Otherwise, update it.
   */
  updateList?: Maybe<List>;
  deleteList?: Maybe<List>;
  savePickupInSession?: Maybe<Session>;
  /** Set new orderForm. */
  newOrderForm?: Maybe<OrderForm>;
};


export type MutationAddItemArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  items?: Maybe<Array<Maybe<OrderFormItemInput>>>;
  utmParams?: Maybe<OrderFormInputUtmParams>;
  utmiParams?: Maybe<OrderFormInputUtmiParams>;
};


export type MutationCancelOrderArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
};


export type MutationUpdateItemsArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  items?: Maybe<Array<Maybe<OrderFormItemInput>>>;
};


export type MutationUpdateProfileArgs = {
  fields?: Maybe<ProfileInput>;
  customFields?: Maybe<Array<Maybe<ProfileCustomFieldInput>>>;
};


export type MutationUpdateAddressArgs = {
  id?: Maybe<Scalars['String']>;
  fields?: Maybe<AddressInput>;
};


export type MutationCreateAddressArgs = {
  fields?: Maybe<AddressInput>;
};


export type MutationSaveAddressArgs = {
  address: AddressInput;
};


export type MutationDeleteAddressArgs = {
  id?: Maybe<Scalars['String']>;
};


export type MutationUpdateProfilePictureArgs = {
  file: Scalars['Upload'];
  field?: Maybe<Scalars['String']>;
};


export type MutationUploadProfilePictureArgs = {
  file: Scalars['Upload'];
  field?: Maybe<Scalars['String']>;
};


export type MutationSubscribeNewsletterArgs = {
  email?: Maybe<Scalars['String']>;
  isNewsletterOptIn?: Maybe<Scalars['Boolean']>;
  fields?: Maybe<NewsletterFieldsInput>;
};


export type MutationUpdateOrderFormProfileArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  fields?: Maybe<OrderFormProfileInput>;
};


export type MutationUpdateOrderFormShippingArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  address?: Maybe<OrderFormAddressInput>;
};


export type MutationUpdateOrderFormPaymentArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  payments?: Maybe<Array<Maybe<OrderFormPaymentInput>>>;
};


export type MutationUpdateOrderFormIgnoreProfileArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  ignoreProfileData?: Maybe<Scalars['Boolean']>;
};


export type MutationAddOrderFormPaymentTokenArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  paymentToken?: Maybe<OrderFormPaymentTokenInput>;
};


export type MutationSetOrderFormCustomDataArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  appId?: Maybe<Scalars['String']>;
  field?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};


export type MutationAddAssemblyOptionsArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  itemId?: Maybe<Scalars['String']>;
  assemblyOptionsId?: Maybe<Scalars['String']>;
  options?: Maybe<Array<Maybe<AssemblyOptionInput>>>;
};


export type MutationUpdateOrderFormCheckinArgs = {
  orderFormId?: Maybe<Scalars['String']>;
  checkin?: Maybe<OrderFormCheckinInput>;
};


export type MutationCreatePaymentTokensArgs = {
  sessionId?: Maybe<Scalars['String']>;
  payments?: Maybe<Array<Maybe<PaymentInput>>>;
};


export type MutationSetPlaceholderArgs = {
  fields?: Maybe<PlaceholderInput>;
};


export type MutationSendEmailVerificationArgs = {
  email: Scalars['String'];
};


export type MutationAccessKeySignInArgs = {
  email: Scalars['String'];
  code: Scalars['String'];
};


export type MutationClassicSignInArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationOAuthArgs = {
  provider?: Maybe<Scalars['String']>;
  redirectUrl?: Maybe<Scalars['String']>;
};


export type MutationRecoveryPasswordArgs = {
  email: Scalars['String'];
  newPassword: Scalars['String'];
  code: Scalars['String'];
};


export type MutationRedefinePasswordArgs = {
  email: Scalars['String'];
  currentPassword: Scalars['String'];
  newPassword: Scalars['String'];
  vtexIdVersion?: Maybe<Scalars['String']>;
};


export type MutationLogOutFromSessionArgs = {
  sessionId?: Maybe<Scalars['ID']>;
};


export type MutationImpersonateArgs = {
  email: Scalars['String'];
};


export type MutationCreateDocumentArgs = {
  acronym: Scalars['String'];
  document?: Maybe<DocumentInput>;
  account?: Maybe<Scalars['String']>;
  schema?: Maybe<Scalars['String']>;
};


export type MutationUpdateDocumentArgs = {
  acronym: Scalars['String'];
  document?: Maybe<DocumentInput>;
  account?: Maybe<Scalars['String']>;
  schema?: Maybe<Scalars['String']>;
};


export type MutationDeleteDocumentArgs = {
  acronym: Scalars['String'];
  documentId: Scalars['String'];
};


export type MutationUploadAttachmentArgs = {
  acronym: Scalars['String'];
  documentId: Scalars['String'];
  field: Scalars['String'];
  file: Scalars['Upload'];
};


export type MutationCreateDocumentV2Args = {
  dataEntity: Scalars['String'];
  document?: Maybe<DocumentInputV2>;
  account?: Maybe<Scalars['String']>;
  schema?: Maybe<Scalars['String']>;
};


export type MutationCreateListArgs = {
  list?: Maybe<ListInput>;
};


export type MutationUpdateListArgs = {
  id: Scalars['ID'];
  list?: Maybe<ListInput>;
};


export type MutationDeleteListArgs = {
  id: Scalars['ID'];
};


export type MutationSavePickupInSessionArgs = {
  address?: Maybe<OrderFormAddressInput>;
  name?: Maybe<Scalars['String']>;
};


export type MutationNewOrderFormArgs = {
  orderFormId?: Maybe<Scalars['String']>;
};

export type NearPickupPointQueryResponse = {
  __typename?: 'NearPickupPointQueryResponse';
  /** List of pickup points found */
  items?: Maybe<Array<Maybe<PickupPoint>>>;
};

export type NewsletterFieldsInput = {
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  bindingId?: Maybe<Scalars['String']>;
  bindingUrl?: Maybe<Scalars['String']>;
};

export type Offer = {
  __typename?: 'Offer';
  Installments?: Maybe<Array<Maybe<Installment>>>;
  Price?: Maybe<Scalars['Float']>;
  ListPrice?: Maybe<Scalars['Float']>;
  spotPrice?: Maybe<Scalars['Float']>;
  PriceWithoutDiscount?: Maybe<Scalars['Float']>;
  RewardValue?: Maybe<Scalars['Float']>;
  PriceValidUntil?: Maybe<Scalars['String']>;
  AvailableQuantity?: Maybe<Scalars['Float']>;
  Tax?: Maybe<Scalars['Float']>;
  CacheVersionUsedToCallCheckout?: Maybe<Scalars['String']>;
  DeliverySlaSamples?: Maybe<Array<Maybe<DeliverySlaSamples>>>;
  /** List of discount highlights */
  discountHighlights?: Maybe<Array<Discount>>;
  teasers?: Maybe<Array<Teaser>>;
  /** List of gifts associated with the product */
  giftSkuIds?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type OfferInstallmentsArgs = {
  criteria?: Maybe<InstallmentsCriteria>;
  rates?: Maybe<Scalars['Boolean']>;
};

export type OnlyProduct = {
  __typename?: 'OnlyProduct';
  brand?: Maybe<Scalars['String']>;
  categoryId?: Maybe<Scalars['ID']>;
  /** @deprecated Use 'categoryTree' field for internationalization support */
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** @deprecated Use 'categoryTree' field for internationalization support */
  categoriesIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryTree?: Maybe<Array<Maybe<Category>>>;
  clusterHighlights?: Maybe<Array<Maybe<ClusterHighlight>>>;
  productClusters?: Maybe<Array<Maybe<ProductClusters>>>;
  description?: Maybe<Scalars['String']>;
  link?: Maybe<Scalars['String']>;
  linkText?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['ID']>;
  productName?: Maybe<Scalars['String']>;
  properties?: Maybe<Array<Maybe<Property>>>;
  propertyGroups?: Maybe<Array<Maybe<PropertyGroup>>>;
  productReference?: Maybe<Scalars['String']>;
  recommendations?: Maybe<Recommendation>;
  jsonSpecifications?: Maybe<Scalars['String']>;
};

export type Order = {
  __typename?: 'Order';
  allowCancellation?: Maybe<Scalars['Boolean']>;
  orderId?: Maybe<Scalars['String']>;
  orderGroup?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  statusDescription?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  salesChannel?: Maybe<Scalars['String']>;
  creationDate?: Maybe<Scalars['String']>;
  customData?: Maybe<CustomData>;
  lastChange?: Maybe<Scalars['String']>;
  timeZoneCreationDate?: Maybe<Scalars['String']>;
  timeZoneLastChange?: Maybe<Scalars['String']>;
  invoicedDate?: Maybe<Scalars['String']>;
  isCompleted?: Maybe<Scalars['Boolean']>;
  items?: Maybe<Array<Maybe<OrderItem>>>;
  sellers?: Maybe<Array<Maybe<OrderItemSeller>>>;
  totals?: Maybe<Array<Maybe<OrderItemTotal>>>;
  paymentData?: Maybe<OrderItemPaymentData>;
  shippingData?: Maybe<OrderItemShippingData>;
  storePreferencesData?: Maybe<StorePreferencesData>;
};

export type OrderForm = {
  __typename?: 'OrderForm';
  /** orderFormId is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  orderFormId?: Maybe<Scalars['String']>;
  customData?: Maybe<CustomData>;
  value?: Maybe<Scalars['Float']>;
  items?: Maybe<Array<Maybe<OrderFormItem>>>;
  salesChannel?: Maybe<Scalars['String']>;
  loggedIn?: Maybe<Scalars['Boolean']>;
  isCheckedIn?: Maybe<Scalars['Boolean']>;
  storeId?: Maybe<Scalars['String']>;
  allowManualPrice?: Maybe<Scalars['Boolean']>;
  canEditData?: Maybe<Scalars['Boolean']>;
  userProfileId?: Maybe<Scalars['String']>;
  userType?: Maybe<Scalars['String']>;
  ignoreProfileData?: Maybe<Scalars['Boolean']>;
  totalizers?: Maybe<Array<Maybe<Totalizer>>>;
  clientProfileData?: Maybe<ClientProfile>;
  sellers?: Maybe<Array<Maybe<OrderFormSeller>>>;
  shippingData?: Maybe<OrderFormShippingData>;
  storePreferencesData?: Maybe<StorePreferencesData>;
  itemMetadata?: Maybe<ItemMetadata>;
  checkedInPickupPointId?: Maybe<Scalars['String']>;
  pickupPointCheckedIn?: Maybe<PickupPoint>;
};

export type OrderFormAddressInput = {
  addressId?: Maybe<Scalars['String']>;
  addressType?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
  isDisposable?: Maybe<Scalars['Boolean']>;
};

export type OrderFormCheckinInput = {
  isCheckedIn?: Maybe<Scalars['Boolean']>;
  pickupPointId?: Maybe<Scalars['String']>;
};

export type OrderFormInputUtmiParams = {
  campaign?: Maybe<Scalars['String']>;
  part?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['String']>;
};

export type OrderFormInputUtmParams = {
  campaign?: Maybe<Scalars['String']>;
  medium?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
};

export type OrderFormItem = {
  __typename?: 'OrderFormItem';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  detailUrl?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  skuName?: Maybe<Scalars['String']>;
  productRefId?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  uniqueId?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  refId?: Maybe<Scalars['String']>;
  ean?: Maybe<Scalars['String']>;
  priceValidUntil?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  tax?: Maybe<Scalars['Int']>;
  listPrice?: Maybe<Scalars['Float']>;
  sellingPrice?: Maybe<Scalars['Float']>;
  rewardValue?: Maybe<Scalars['Int']>;
  isGift?: Maybe<Scalars['Boolean']>;
  parentItemIndex?: Maybe<Scalars['Int']>;
  parentAssemblyBinding?: Maybe<Scalars['String']>;
  additionalInfo?: Maybe<ItemAdditionalInfo>;
  /** Informations related to assembly options children of this item */
  assemblyOptions?: Maybe<AssemblyOptionItem>;
  /** ID of item's seller */
  seller?: Maybe<Scalars['String']>;
  /** Item index on cart */
  cartIndex?: Maybe<Scalars['Int']>;
  /** Category ids on orderFormItem */
  productCategoryIds?: Maybe<Scalars['String']>;
  productCategories?: Maybe<Scalars['ProductCategories']>;
  /** Price tags on orderFormItem */
  priceTags?: Maybe<Array<Maybe<PriceTags>>>;
  /** measurementUnit on orderFormItem */
  measurementUnit?: Maybe<Scalars['String']>;
  /** Selling price of item summing with all of its children items selling prices. */
  sellingPriceWithAssemblies?: Maybe<Scalars['Float']>;
  /** unitMultiplier on orderFormItem */
  unitMultiplier?: Maybe<Scalars['Float']>;
  canHaveAttachment?: Maybe<Scalars['Boolean']>;
  priceDefinition?: Maybe<PriceDefinition>;
};

export type OrderFormItemInput = {
  id?: Maybe<Scalars['Int']>;
  index?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  seller?: Maybe<Scalars['ID']>;
  inputValues?: Maybe<Scalars['InputValues']>;
  options?: Maybe<Array<Maybe<AssemblyOptionInput>>>;
};

export type OrderFormPaymentInput = {
  paymentSystem?: Maybe<Scalars['Int']>;
  referenceValue?: Maybe<Scalars['Float']>;
  bin?: Maybe<Scalars['Int']>;
  tokenId?: Maybe<Scalars['String']>;
};

export type OrderFormPaymentTokenInput = {
  tokenId?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  bin?: Maybe<Scalars['String']>;
  paymentSystem?: Maybe<Scalars['String']>;
  paymentSystemName?: Maybe<Scalars['String']>;
};

export type OrderFormProfileInput = {
  email?: Maybe<Scalars['String']>;
  isCorporate?: Maybe<Scalars['Boolean']>;
  corporateDocument?: Maybe<Scalars['String']>;
  corporateName?: Maybe<Scalars['String']>;
  corporatePhone?: Maybe<Scalars['String']>;
  document?: Maybe<Scalars['String']>;
  documentType?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  stateInscription?: Maybe<Scalars['String']>;
  tradeName?: Maybe<Scalars['String']>;
};

export type OrderFormSeller = {
  __typename?: 'OrderFormSeller';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type OrderFormShippingData = {
  __typename?: 'OrderFormShippingData';
  address?: Maybe<Address>;
  availableAddresses: Array<Maybe<Address>>;
  selectedAddresses: Array<Maybe<Address>>;
};

export type OrderItem = {
  __typename?: 'OrderItem';
  uniqueId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  refId?: Maybe<Scalars['String']>;
  productRefId?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  skuName?: Maybe<Scalars['String']>;
  tax?: Maybe<Scalars['Float']>;
  price?: Maybe<Scalars['Float']>;
  listPrice?: Maybe<Scalars['Float']>;
  sellingPrice?: Maybe<Scalars['Float']>;
  rewardValue?: Maybe<Scalars['Float']>;
  additionalInfo?: Maybe<OrderItemAdditionalInfo>;
  preSaleDate?: Maybe<Scalars['String']>;
  productCategoryIds?: Maybe<Scalars['String']>;
  handling?: Maybe<Scalars['Boolean']>;
  isGift?: Maybe<Scalars['Boolean']>;
  quantity?: Maybe<Scalars['Int']>;
  seller?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  detailUrl?: Maybe<Scalars['String']>;
  availability?: Maybe<Scalars['String']>;
  measurementUnit?: Maybe<Scalars['String']>;
  unitMultiplier?: Maybe<Scalars['Int']>;
  parentItemIndex?: Maybe<Scalars['Int']>;
  parentAssemblyBinding?: Maybe<Scalars['String']>;
  bundleItems?: Maybe<Array<Maybe<OrderItem>>>;
  attachments: Array<OrderItemAttachment>;
};

export type OrderItemAdditionalInfo = {
  __typename?: 'OrderItemAdditionalInfo';
  brandName?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['String']>;
};

export type OrderItemAttachment = {
  __typename?: 'OrderItemAttachment';
  name?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['AttachmentContent']>;
};

export type OrderItemPayment = {
  __typename?: 'OrderItemPayment';
  paymentSystem?: Maybe<Scalars['String']>;
  paymentSystemName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  installments?: Maybe<Scalars['Int']>;
  connectorResponses?: Maybe<OrderItemPaymentConnectorResponse>;
  firstDigits?: Maybe<Scalars['String']>;
  lastDigits?: Maybe<Scalars['String']>;
  group?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

export type OrderItemPaymentConnectorResponse = {
  __typename?: 'OrderItemPaymentConnectorResponse';
  tid?: Maybe<Scalars['String']>;
  returnCode?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  /** Payment Connector Additional Data Response */
  additionalData?: Maybe<Scalars['ConnectorAdditionalData']>;
};

export type OrderItemPaymentData = {
  __typename?: 'OrderItemPaymentData';
  transactions?: Maybe<Array<Maybe<OrderItemTransactions>>>;
};

export type OrderItemSeller = {
  __typename?: 'OrderItemSeller';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
};

export type OrderItemShippingData = {
  __typename?: 'OrderItemShippingData';
  logisticsInfo?: Maybe<Array<Maybe<LogisticsInfo>>>;
  address?: Maybe<OrderItemShippingDataAddress>;
};

export type OrderItemShippingDataAddress = {
  __typename?: 'OrderItemShippingDataAddress';
  receiverName?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
};

export type OrderItemTotal = {
  __typename?: 'OrderItemTotal';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};

export type OrderItemTransactions = {
  __typename?: 'OrderItemTransactions';
  isActive?: Maybe<Scalars['Boolean']>;
  merchantName?: Maybe<Scalars['String']>;
  payments?: Maybe<Array<Maybe<OrderItemPayment>>>;
  transactionId?: Maybe<Scalars['String']>;
};

export type PageEntityIdentifier = 
  | 'brand'
  | 'department'
  | 'category'
  | 'subcategory'
  | 'search';

export type PageType = {
  __typename?: 'PageType';
  id?: Maybe<Scalars['String']>;
  type?: Maybe<PageEntityIdentifier>;
};

export type Parameter = {
  __typename?: 'Parameter';
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type PaymentAddress = {
  postalCode?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
};

export type PaymentInput = {
  paymentSystem?: Maybe<Scalars['String']>;
  cardHolder?: Maybe<Scalars['String']>;
  cardNumber?: Maybe<Scalars['String']>;
  expiryDate?: Maybe<Scalars['String']>;
  csc?: Maybe<Scalars['String']>;
  document?: Maybe<Scalars['String']>;
  documentType?: Maybe<Scalars['String']>;
  partnerId?: Maybe<Scalars['String']>;
  address?: Maybe<PaymentAddress>;
};

/**  Payment data used by profile resolvers  */
export type PaymentProfile = {
  __typename?: 'PaymentProfile';
  /**  Id representing this payment form used as reference for the cache */
  cacheId?: Maybe<Scalars['ID']>;
  /**  Id representing this payment form */
  id?: Maybe<Scalars['String']>;
  /**  Id for the payment system related to this payment form */
  paymentSystem?: Maybe<Scalars['String']>;
  /**  The name of the payment system  */
  paymentSystemName?: Maybe<Scalars['String']>;
  /**  Last digits of the card this type represents (in the form ************9999) */
  cardNumber?: Maybe<Scalars['String']>;
  /**  Billing address for this payment form (type definition in the Profile file) */
  address?: Maybe<Address>;
  /**  Boolean informing whether the card is expired or not  */
  isExpired?: Maybe<Scalars['Boolean']>;
  /**  String representing the expiration date in the form dd/yyyy  */
  expirationDate?: Maybe<Scalars['String']>;
  /**  Flag indicating if the card was registered in Profile System as 'notFound' or 'billingAddressEmpty' on the Gateway side  */
  accountStatus?: Maybe<Scalars['String']>;
};

export type PaymentSession = {
  __typename?: 'PaymentSession';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
};

export type PaymentToken = {
  __typename?: 'PaymentToken';
  token?: Maybe<Scalars['String']>;
  bin?: Maybe<Scalars['String']>;
  lastDigits?: Maybe<Scalars['String']>;
  expiresAt?: Maybe<Scalars['String']>;
  paymentSystem?: Maybe<Scalars['String']>;
  paymentSystemName?: Maybe<Scalars['String']>;
};

export type PickupAddress = {
  __typename?: 'PickupAddress';
  addressType?: Maybe<Scalars['String']>;
  receiverName?: Maybe<Scalars['String']>;
  addressId?: Maybe<Scalars['String']>;
  postalCode?: Maybe<Scalars['String']>;
  city?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  neighborhood?: Maybe<Scalars['String']>;
  complement?: Maybe<Scalars['String']>;
  reference?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['Float']>>>;
};

export type PickupPoint = {
  __typename?: 'PickupPoint';
  /** Working hours of given pickup point */
  businessHours?: Maybe<Array<Maybe<BusinessHours>>>;
  /** If false, it means pickup point is currently disabled */
  isActive?: Maybe<Scalars['Boolean']>;
  /** Pickup point restrictions */
  pickupHolidays?: Maybe<Array<Maybe<HolidayHours>>>;
  /** Distance in kilometers if this is a search result */
  distance?: Maybe<Scalars['Float']>;
  friendlyName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  /** AdditionalInfo from pickup point */
  instructions?: Maybe<Scalars['String']>;
  /** Seller account name */
  seller?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
};

export type PickupStoreInfo = {
  __typename?: 'pickupStoreInfo';
  friendlyName?: Maybe<Scalars['String']>;
  address?: Maybe<PickupAddress>;
  additionalInfo?: Maybe<Scalars['String']>;
  dockId?: Maybe<Scalars['String']>;
  isPickupStore?: Maybe<Scalars['Boolean']>;
};

export type PickupStoreInfo = {
  __typename?: 'PickupStoreInfo';
  friendlyName?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
};

export type PlaceholderInput = {
  name?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  settings?: Maybe<Scalars['String']>;
};

export type PriceDefinition = {
  __typename?: 'PriceDefinition';
  calculatedSellingPrice?: Maybe<Scalars['Float']>;
  sellingPrices?: Maybe<Array<Maybe<SellingPrice>>>;
  total?: Maybe<Scalars['Float']>;
};

export type PriceRangesFacet = {
  __typename?: 'PriceRangesFacet';
  /** @deprecated Use 'id' field instead */
  Id?: Maybe<Scalars['Int']>;
  /** @deprecated Use 'name' field instead */
  Name?: Maybe<Scalars['String']>;
  /** @deprecated Use 'quantity' field instead */
  Quantity: Scalars['Int'];
  /** @deprecated Use 'link' field instead */
  Link: Scalars['String'];
  /** @deprecated Use 'slug' field instead */
  Slug?: Maybe<Scalars['String']>;
  /** @deprecated Use 'children' field instead */
  Children?: Maybe<Array<Maybe<PriceRangesFacet>>>;
  quantity: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  link: Scalars['String'];
  linkEncoded: Scalars['String'];
  map?: Maybe<Scalars['String']>;
  value: Scalars['String'];
  selected: Scalars['Boolean'];
  slug?: Maybe<Scalars['String']>;
};

export type PriceTableItem = {
  __typename?: 'PriceTableItem';
  id?: Maybe<Scalars['String']>;
  assemblyId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Int']>;
};

export type PriceTags = {
  __typename?: 'PriceTags';
  identifier?: Maybe<Scalars['String']>;
  isPercentual?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  rawValue?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Int']>;
};

export type Product = {
  __typename?: 'Product';
  /** Brand of the product */
  brand?: Maybe<Scalars['String']>;
  /** Id of the brand of the product */
  brandId?: Maybe<Scalars['Int']>;
  /** linkText is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  categoryId?: Maybe<Scalars['ID']>;
  /**
   * Categories of the product
   * @deprecated Use 'categoryTree' field for internationalization support
   */
  categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  /**
   * Categories ids of the product
   * @deprecated Use 'categoryTree' field for internationalization support
   */
  categoriesIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Product's categories */
  categoryTree?: Maybe<Array<Maybe<Category>>>;
  /** List of related products */
  clusterHighlights?: Maybe<Array<Maybe<ClusterHighlight>>>;
  productClusters?: Maybe<Array<Maybe<ProductClusters>>>;
  /** Product description */
  description?: Maybe<Scalars['String']>;
  /** SKU objects of the product */
  items?: Maybe<Array<Maybe<Sku>>>;
  /** Product URL */
  link?: Maybe<Scalars['String']>;
  /** Product slug */
  linkText?: Maybe<Scalars['String']>;
  /** Product ID */
  productId?: Maybe<Scalars['ID']>;
  /** Product name */
  productName?: Maybe<Scalars['String']>;
  /** Array of product properties */
  properties?: Maybe<Array<Maybe<Property>>>;
  /** Array of product properties */
  propertyGroups?: Maybe<Array<Maybe<PropertyGroup>>>;
  /** Product reference */
  productReference?: Maybe<Scalars['String']>;
  /** Title used by html tag */
  titleTag?: Maybe<Scalars['String']>;
  /** Description used by html tag */
  metaTagDescription?: Maybe<Scalars['String']>;
  /** Related Products */
  recommendations?: Maybe<Recommendation>;
  /** JSON specification of the product */
  jsonSpecifications?: Maybe<Scalars['String']>;
  /** List of benefits associated with this product */
  benefits?: Maybe<Array<Maybe<Benefit>>>;
  itemMetadata?: Maybe<ItemMetadata>;
  /** Array of product SpecificationGroup */
  specificationGroups?: Maybe<Array<Maybe<SpecificationGroup>>>;
};


export type ProductClusters = {
  __typename?: 'ProductClusters';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
};

export type ProductSearch = {
  __typename?: 'ProductSearch';
  products?: Maybe<Array<Maybe<Product>>>;
  recordsFiltered?: Maybe<Scalars['Int']>;
  titleTag?: Maybe<Scalars['String']>;
  metaTagDescription?: Maybe<Scalars['String']>;
  breadcrumb?: Maybe<Array<Maybe<SearchBreadcrumb>>>;
};

export type ProductSpecification = {
  __typename?: 'productSpecification';
  fieldName?: Maybe<Scalars['String']>;
  fieldValues?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ProductUniqueIdentifier = {
  field: ProductUniqueIdentifierField;
  value: Scalars['ID'];
};

export type ProductUniqueIdentifierField = 
  | 'id'
  | 'slug'
  | 'ean'
  | 'reference'
  | 'sku';

export type Profile = {
  __typename?: 'Profile';
  /** email is used as cacheId */
  cacheId?: Maybe<Scalars['ID']>;
  /**
   * DEPRECATED
   * @deprecated Field no longer supported
   */
  id?: Maybe<Scalars['ID']>;
  /** User's first name */
  firstName?: Maybe<Scalars['String']>;
  /** User's last name */
  lastName?: Maybe<Scalars['String']>;
  /** User's profile picture (only fetched if saved as 'profilePicture') */
  profilePicture?: Maybe<Scalars['String']>;
  /** User's email */
  email?: Maybe<Scalars['String']>;
  /** Document identification. E.g. CPF, SSN, Driver License */
  document?: Maybe<Scalars['String']>;
  /**
   * DEPRECATED
   * @deprecated Field no longer supported
   */
  phone?: Maybe<Scalars['String']>;
  /** User's ID */
  userId?: Maybe<Scalars['ID']>;
  /** User's birth date */
  birthDate?: Maybe<Scalars['String']>;
  /** User's gender (plain unvalidated string) */
  gender?: Maybe<Scalars['String']>;
  /** User' personal phone */
  homePhone?: Maybe<Scalars['String']>;
  /** User's business phone */
  businessPhone?: Maybe<Scalars['String']>;
  /**
   * Collection of user's address
   * @deprecated Field no longer supported
   */
  address?: Maybe<Array<Maybe<Address>>>;
  /** Collection of user's address */
  addresses?: Maybe<Array<Maybe<Address>>>;
  /** Whether the user is a corporation or not */
  isCorporate?: Maybe<Scalars['Boolean']>;
  /**
   * DEPRECATED
   * @deprecated Field no longer supported
   */
  tradeName?: Maybe<Scalars['String']>;
  /** User's company name */
  corporateName?: Maybe<Scalars['String']>;
  /** User's company document (e.g. CNPJ) */
  corporateDocument?: Maybe<Scalars['String']>;
  /** User's company state registration */
  stateRegistration?: Maybe<Scalars['String']>;
  /** Collection of user's payment data */
  payments?: Maybe<Array<Maybe<PaymentProfile>>>;
  /** Other fields to query */
  customFields?: Maybe<Array<Maybe<ProfileCustomField>>>;
  /** User's last password update time */
  passwordLastUpdate?: Maybe<Scalars['String']>;
  /** Shows if PII is being audited */
  pii?: Maybe<Scalars['Boolean']>;
};

/** Custom fields to add to query */
export type ProfileCustomField = {
  __typename?: 'ProfileCustomField';
  /** Id used for caching */
  cacheId?: Maybe<Scalars['ID']>;
  /** Name of the custom field */
  key?: Maybe<Scalars['String']>;
  /** Value of the custom field */
  value?: Maybe<Scalars['String']>;
};

export type ProfileCustomFieldInput = {
  key?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type ProfileInput = {
  /** User's email */
  email: Scalars['String'];
  /** User's first name */
  firstName?: Maybe<Scalars['String']>;
  /** User's last name */
  lastName?: Maybe<Scalars['String']>;
  /** Document identification. E.g. CPF, SSN, Driver License */
  document?: Maybe<Scalars['String']>;
  /** DEPRECATED */
  phone?: Maybe<Scalars['String']>;
  /** User's birth date */
  birthDate?: Maybe<Scalars['String']>;
  /** User's gender (plain unvalidated string) */
  gender?: Maybe<Scalars['String']>;
  /** User' personal phone */
  homePhone?: Maybe<Scalars['String']>;
  /** User's business phone */
  businessPhone?: Maybe<Scalars['String']>;
  /** DEPRECATED */
  tradeName?: Maybe<Scalars['String']>;
  /** User's company corporate name */
  corporateName?: Maybe<Scalars['String']>;
  /** User's company corporate document (e.g. CNPJ) */
  corporateDocument?: Maybe<Scalars['String']>;
  /** User's company state registration */
  stateRegistration?: Maybe<Scalars['String']>;
  /** Whether the user is a corporation or not */
  isCorporate?: Maybe<Scalars['Boolean']>;
};

export type Property = {
  __typename?: 'Property';
  name?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type PropertyGroup = {
  __typename?: 'PropertyGroup';
  name?: Maybe<Scalars['String']>;
  properties?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/**  Describes an OAuth provider type. e.g.: Google, Facebook */
export type Provider = {
  __typename?: 'Provider';
  /**  Provider Name. e.g.: Google, Facebook  */
  providerName?: Maybe<Scalars['String']>;
  /**  The provider class. e.g.: google-plus, facebook  */
  className?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  /**
   * Returns a specified product
   * @deprecated Use the query defined in the search-graphql app
   */
  product?: Maybe<Product>;
  /**
   * Returns products list filtered and ordered
   * @deprecated Use the query defined in the search-graphql app
   */
  productSearch?: Maybe<ProductSearch>;
  /** @deprecated Use the query defined in the search-graphql app */
  searchMetadata?: Maybe<SearchMetadata>;
  /**
   * Returns products list filtered and ordered
   * @deprecated Use the query defined in the search-graphql app
   */
  products?: Maybe<Array<Maybe<Product>>>;
  /** @deprecated Use the query defined in the search-graphql app */
  productRecommendations?: Maybe<Array<Maybe<Product>>>;
  /** @deprecated Use the query defined in the search-graphql app */
  productsByIdentifier?: Maybe<Array<Maybe<Product>>>;
  /**
   * Returns facets category
   * @deprecated Use the query defined in the search-graphql app
   */
  facets?: Maybe<Facets>;
  /**
   * Search for products. e.g.: search(query: 'eletronics', rest: 'lg', map: 'c,b')
   * @deprecated Use the 'products' and 'facets' queries separately
   */
  search?: Maybe<Search>;
  /** Returns a specified category */
  category?: Maybe<Category>;
  /** Returns categories tree */
  categories?: Maybe<Array<Maybe<Category>>>;
  /** Returns a specified brand */
  brand?: Maybe<Brand>;
  /** Returns brands list */
  brands?: Maybe<Array<Maybe<Brand>>>;
  /** Returns orderForm shipping simulation */
  shipping?: Maybe<ShippingData>;
  /** Returns checkout cart details */
  orderForm?: Maybe<OrderForm>;
  /** returns a certain checkout cart details */
  searchOrderForm?: Maybe<OrderForm>;
  /**
   * DEPRECATED
   * @deprecated Use orders endpoint of vtex.orders-graphql instead
   */
  orders?: Maybe<Array<Maybe<Order>>>;
  /** Returns a specified user order */
  order?: Maybe<Order>;
  /** Returns the specified store configurations */
  storeConfigs?: Maybe<StoreConfigs>;
  /** Returns user profile details */
  profile?: Maybe<Profile>;
  /**
   * Get auto complete suggestions in search
   * @deprecated Use the query defined in the search-graphql app
   */
  autocomplete?: Maybe<Suggestions>;
  /** Search documents */
  documents?: Maybe<Array<Maybe<Document>>>;
  /** Get document */
  document?: Maybe<Document>;
  /** Get a document schema */
  documentSchema?: Maybe<DocumentSchema>;
  documentPublicSchema?: Maybe<DocumentSchemaV2>;
  /** Get the benefits associated with a list of products */
  benefits?: Maybe<Array<Maybe<Benefit>>>;
  /** Get the options available to authenticate users */
  loginOptions?: Maybe<LoginOptions>;
  /** Get an object containing the list of the user's loginSessions */
  loginSessionsInfo?: Maybe<LoginSessionsInfo>;
  /**
   * Get the IDs for the provided search context slugs
   * @deprecated Use the 'pageType' query
   */
  searchContextFromParams?: Maybe<SearchContext>;
  /** Get search page type */
  pageType?: Maybe<PageType>;
  /** Get logistics information about the store */
  logistics?: Maybe<LogisticsData>;
  /** Get a list of pickup points near specified lat and long */
  nearPickupPoints?: Maybe<NearPickupPointQueryResponse>;
  skuPickupSLAs?: Maybe<Array<Maybe<CheckoutSla>>>;
  skuPickupSLA?: Maybe<CheckoutSla>;
  /** Get pickup point by its id */
  pickupPoint?: Maybe<PickupPoint>;
  /** Get profile information to session users */
  getSession?: Maybe<Session>;
  /** Get the Wish List informations by the received id */
  list?: Maybe<List>;
  /** Get all lists from the received owner */
  listsByOwner?: Maybe<Array<Maybe<List>>>;
  /** Get logged in user's last order */
  userLastOrder?: Maybe<Order>;
  checkProfileAllowed?: Maybe<UserCondition>;
  itemsWithSimulation?: Maybe<Array<Maybe<Sku>>>;
};


export type QueryProductArgs = {
  slug?: Maybe<Scalars['String']>;
  identifier?: Maybe<ProductUniqueIdentifier>;
};


export type QueryProductSearchArgs = {
  query?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  specificationFilters?: Maybe<Array<Maybe<Scalars['String']>>>;
  priceRange?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
};


export type QuerySearchMetadataArgs = {
  query?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
};


export type QueryProductsArgs = {
  query?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  specificationFilters?: Maybe<Array<Maybe<Scalars['String']>>>;
  priceRange?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
};


export type QueryProductRecommendationsArgs = {
  identifier?: Maybe<ProductUniqueIdentifier>;
  type?: Maybe<CrossSelingInputEnum>;
};


export type QueryProductsByIdentifierArgs = {
  field: ProductUniqueIdentifierField;
  values?: Maybe<Array<Scalars['ID']>>;
};


export type QueryFacetsArgs = {
  facets?: Maybe<Scalars['String']>;
  query?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  hideUnavailableItems?: Maybe<Scalars['Boolean']>;
};


export type QuerySearchArgs = {
  query?: Maybe<Scalars['String']>;
  map?: Maybe<Scalars['String']>;
  rest?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  specificationFilters?: Maybe<Array<Maybe<Scalars['String']>>>;
  priceRange?: Maybe<Scalars['String']>;
  collection?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
  orderBy?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['Int']>;
  to?: Maybe<Scalars['Int']>;
};


export type QueryCategoryArgs = {
  id?: Maybe<Scalars['Int']>;
};


export type QueryCategoriesArgs = {
  treeLevel?: Maybe<Scalars['Int']>;
};


export type QueryBrandArgs = {
  id?: Maybe<Scalars['Int']>;
};


export type QueryShippingArgs = {
  items?: Maybe<Array<Maybe<ShippingItem>>>;
  postalCode?: Maybe<Scalars['String']>;
  geoCoordinates?: Maybe<Array<Maybe<Scalars['String']>>>;
  country?: Maybe<Scalars['String']>;
};


export type QuerySearchOrderFormArgs = {
  orderFormId: Scalars['String'];
};


export type QueryOrderArgs = {
  id: Scalars['String'];
};


export type QueryProfileArgs = {
  customFields?: Maybe<Scalars['String']>;
};


export type QueryAutocompleteArgs = {
  maxRows?: Maybe<Scalars['Int']>;
  searchTerm?: Maybe<Scalars['String']>;
};


export type QueryDocumentsArgs = {
  acronym?: Maybe<Scalars['String']>;
  fields?: Maybe<Array<Maybe<Scalars['String']>>>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<Scalars['String']>;
  sort?: Maybe<Scalars['String']>;
  schema?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
};


export type QueryDocumentArgs = {
  acronym?: Maybe<Scalars['String']>;
  fields?: Maybe<Array<Maybe<Scalars['String']>>>;
  id?: Maybe<Scalars['String']>;
  account?: Maybe<Scalars['String']>;
};


export type QueryDocumentSchemaArgs = {
  dataEntity?: Maybe<Scalars['String']>;
  schema?: Maybe<Scalars['String']>;
};


export type QueryDocumentPublicSchemaArgs = {
  dataEntity: Scalars['String'];
  schema: Scalars['String'];
};


export type QueryBenefitsArgs = {
  items?: Maybe<Array<Maybe<ShippingItem>>>;
};


export type QuerySearchContextFromParamsArgs = {
  brand?: Maybe<Scalars['String']>;
  department?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
  subcategory?: Maybe<Scalars['String']>;
};


export type QueryPageTypeArgs = {
  path: Scalars['String'];
  query?: Maybe<Scalars['String']>;
};


export type QueryNearPickupPointsArgs = {
  lat: Scalars['String'];
  long: Scalars['String'];
  maxDistance?: Maybe<Scalars['Int']>;
};


export type QuerySkuPickupSlAsArgs = {
  itemId?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['String']>;
  long?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
};


export type QuerySkuPickupSlaArgs = {
  itemId?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
  lat?: Maybe<Scalars['String']>;
  long?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  pickupId?: Maybe<Scalars['String']>;
};


export type QueryPickupPointArgs = {
  id: Scalars['String'];
};


export type QueryListArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QueryListsByOwnerArgs = {
  owner: Scalars['ID'];
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryItemsWithSimulationArgs = {
  items?: Maybe<Array<Maybe<ItemInput>>>;
  regionId?: Maybe<Scalars['String']>;
  salesChannel?: Maybe<Scalars['String']>;
};

export type Recommendation = {
  __typename?: 'Recommendation';
  buy?: Maybe<Array<Maybe<Product>>>;
  view?: Maybe<Array<Maybe<Product>>>;
  similars?: Maybe<Array<Maybe<Product>>>;
};

export type Reference = {
  __typename?: 'Reference';
  Key?: Maybe<Scalars['String']>;
  Value?: Maybe<Scalars['String']>;
};

export type Region = {
  __typename?: 'Region';
  IsPersisted?: Maybe<Scalars['Boolean']>;
  IsRemoved?: Maybe<Scalars['Boolean']>;
  Id?: Maybe<Scalars['ID']>;
  Name?: Maybe<Scalars['String']>;
  CountryCode?: Maybe<Scalars['String']>;
  ZipCode?: Maybe<Scalars['String']>;
  CultureInfoName?: Maybe<Scalars['String']>;
};

export type RemovedOptionItem = {
  __typename?: 'RemovedOptionItem';
  /** The initialQuantity of the assembly option CompositionItem */
  initialQuantity?: Maybe<Scalars['Int']>;
  /** The amount that the user removed of this assembly option */
  removedQuantity?: Maybe<Scalars['Int']>;
  /** The name of this assembly option */
  name?: Maybe<Scalars['String']>;
};

export type Search = {
  __typename?: 'Search';
  facets?: Maybe<Facets>;
  products?: Maybe<Array<Maybe<Product>>>;
  recordsFiltered?: Maybe<Scalars['Int']>;
  titleTag?: Maybe<Scalars['String']>;
  metaTagDescription?: Maybe<Scalars['String']>;
};

export type SearchBreadcrumb = {
  __typename?: 'SearchBreadcrumb';
  name?: Maybe<Scalars['String']>;
  href?: Maybe<Scalars['String']>;
};

export type SearchContext = {
  __typename?: 'SearchContext';
  contextKey?: Maybe<Scalars['String']>;
  brand?: Maybe<Scalars['String']>;
  category?: Maybe<Scalars['String']>;
};

export type SearchMetadata = {
  __typename?: 'SearchMetadata';
  titleTag?: Maybe<Scalars['String']>;
  metaTagDescription?: Maybe<Scalars['String']>;
};

export type Seller = {
  __typename?: 'Seller';
  sellerId?: Maybe<Scalars['ID']>;
  sellerName?: Maybe<Scalars['String']>;
  addToCartLink?: Maybe<Scalars['String']>;
  sellerDefault?: Maybe<Scalars['Boolean']>;
  commertialOffer?: Maybe<Offer>;
  error?: Maybe<Scalars['String']>;
};

export type SellerInput = {
  sellerId?: Maybe<Scalars['ID']>;
};

export type SellingPrice = {
  __typename?: 'SellingPrice';
  quantity?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
};

/** Informations about user Session */
export type Session = {
  __typename?: 'Session';
  cacheId?: Maybe<Scalars['ID']>;
  /** Session ID */
  id?: Maybe<Scalars['ID']>;
  /** Id of admin logged in session */
  adminUserId?: Maybe<Scalars['String']>;
  /** Email of Admin logged in session */
  adminUserEmail?: Maybe<Scalars['String']>;
  /** Check if this admin can impersonate a user */
  impersonable?: Maybe<Scalars['Boolean']>;
  /** Object with information about impersonate user */
  impersonate?: Maybe<ImpersonatedUser>;
  /** Customer address */
  address?: Maybe<Address>;
  /** Profile information of session user */
  profile?: Maybe<SessionProfile>;
  /** UTM Params */
  utmParams?: Maybe<UtmParams>;
  /** UTMI Params */
  utmiParams?: Maybe<UtmiParams>;
  favoritePickup?: Maybe<SessionPickup>;
};

export type SessionPickup = {
  __typename?: 'SessionPickup';
  cacheId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  address?: Maybe<Address>;
};

/** Profile information that is receive in session */
export type SessionProfile = {
  __typename?: 'SessionProfile';
  /** profile ID */
  id?: Maybe<Scalars['ID']>;
  /** User first name */
  firstName?: Maybe<Scalars['String']>;
  /** User last name */
  lastName?: Maybe<Scalars['String']>;
  /** User email */
  email?: Maybe<Scalars['String']>;
  /** Document identification. E.g. CPF, SSN, Driver License */
  document?: Maybe<Scalars['String']>;
  /** User phone number */
  phone?: Maybe<Scalars['String']>;
  /** Price tables */
  priceTables?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type ShippingData = {
  __typename?: 'ShippingData';
  items?: Maybe<Array<Maybe<LogisticsItem>>>;
  logisticsInfo?: Maybe<Array<Maybe<LogisticsInfo>>>;
  messages?: Maybe<Array<Maybe<MessageInfo>>>;
};

export type ShippingItem = {
  id?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['String']>;
  seller?: Maybe<Scalars['String']>;
};

export type ShippingSla = {
  __typename?: 'ShippingSLA';
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  shippingEstimate?: Maybe<Scalars['String']>;
  shippingEstimateDate?: Maybe<Scalars['String']>;
  deliveryIds?: Maybe<Array<Maybe<DeliveryIds>>>;
  deliveryChannel?: Maybe<Scalars['String']>;
  friendlyName?: Maybe<Scalars['String']>;
  pickupPointId?: Maybe<Scalars['String']>;
  pickupStoreInfo?: Maybe<PickupStoreInfo>;
  pickupDistance?: Maybe<Scalars['Float']>;
};

export type Sku = {
  __typename?: 'SKU';
  itemId?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  nameComplete?: Maybe<Scalars['String']>;
  complementName?: Maybe<Scalars['String']>;
  ean?: Maybe<Scalars['String']>;
  referenceId?: Maybe<Array<Maybe<Reference>>>;
  measurementUnit?: Maybe<Scalars['String']>;
  unitMultiplier?: Maybe<Scalars['Float']>;
  kitItems?: Maybe<Array<Maybe<KitItem>>>;
  images?: Maybe<Array<Maybe<Image>>>;
  videos?: Maybe<Array<Maybe<Video>>>;
  sellers?: Maybe<Array<Maybe<Seller>>>;
  variations?: Maybe<Array<Maybe<Property>>>;
  attachments?: Maybe<Array<Maybe<Attachment>>>;
  calculatedAttachments?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  productDescription?: Maybe<Scalars['String']>;
  brandName?: Maybe<Scalars['String']>;
  skuSpecifications?: Maybe<Array<Maybe<SkuSpecification>>>;
  productSpecifications?: Maybe<Array<Maybe<ProductSpecification>>>;
};


export type SkuImagesArgs = {
  quantity?: Maybe<Scalars['Int']>;
};

export type SkuSpecification = {
  __typename?: 'skuSpecification';
  fieldName?: Maybe<Scalars['String']>;
  fieldValues?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type SpecificationGroup = {
  __typename?: 'SpecificationGroup';
  name?: Maybe<Scalars['String']>;
  specifications?: Maybe<Array<Maybe<SpecificationGroupProperty>>>;
};

export type SpecificationGroupProperty = {
  __typename?: 'SpecificationGroupProperty';
  name?: Maybe<Scalars['String']>;
  values?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StoreConfigs = {
  __typename?: 'StoreConfigs';
  tagManagerId?: Maybe<Scalars['String']>;
  siteTitle?: Maybe<Scalars['String']>;
  kiosk?: Maybe<Scalars['Boolean']>;
  timeout?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  googleMapsApiKey?: Maybe<Scalars['String']>;
  ioExtensions?: Maybe<Scalars['Boolean']>;
  geolocation?: Maybe<Scalars['Boolean']>;
  leanShipping?: Maybe<Scalars['Boolean']>;
  invoiceAddress?: Maybe<Scalars['Boolean']>;
};

export type StorePreferencesData = {
  __typename?: 'StorePreferencesData';
  countryCode?: Maybe<Scalars['String']>;
  currencyCode?: Maybe<Scalars['String']>;
  timeZone?: Maybe<Scalars['String']>;
  currencyFormatInfo?: Maybe<CurrencyFormatInfo>;
  currencySymbol?: Maybe<Scalars['String']>;
};

export type Suggestions = {
  __typename?: 'Suggestions';
  /**  searchTerm from Query autocomplete is used as cacheId  */
  cacheId?: Maybe<Scalars['ID']>;
  itemsReturned?: Maybe<Array<Maybe<Items>>>;
};

export type Teaser = {
  __typename?: 'Teaser';
  name?: Maybe<Scalars['String']>;
  generalValues?: Maybe<Array<Maybe<GeneralValueTeaser>>>;
  conditions?: Maybe<TeaserCondition>;
  effects?: Maybe<TeaserEffect>;
};

export type TeaserCondition = {
  __typename?: 'TeaserCondition';
  minimumQuantity?: Maybe<Scalars['Int']>;
  parameters?: Maybe<Array<Maybe<Parameter>>>;
};

export type TeaserEffect = {
  __typename?: 'TeaserEffect';
  parameters?: Maybe<Array<Maybe<Parameter>>>;
};

export type Totalizer = {
  __typename?: 'Totalizer';
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
};


export type UserCondition = {
  __typename?: 'UserCondition';
  condition?: Maybe<UserConditionType>;
  /** @deprecated Use condition field instead */
  allowed?: Maybe<Scalars['Boolean']>;
};

export type UserConditionType = 
  | 'authorized'
  | 'unauthorized'
  | 'forbidden';

export type UtmiParams = {
  __typename?: 'UTMIParams';
  campaign?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['String']>;
  part?: Maybe<Scalars['String']>;
};

export type UtmParams = {
  __typename?: 'UTMParams';
  source?: Maybe<Scalars['String']>;
  medium?: Maybe<Scalars['String']>;
  campaign?: Maybe<Scalars['String']>;
  term?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
};

export type Video = {
  __typename?: 'Video';
  videoUrl?: Maybe<Scalars['String']>;
};

export type VSecurity = {
  __typename?: 'VSecurity';
  allowGetAll?: Maybe<Scalars['Boolean']>;
  publicRead?: Maybe<Array<Maybe<Scalars['String']>>>;
  publicWrite?: Maybe<Array<Maybe<Scalars['String']>>>;
  publicFilter?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export {}