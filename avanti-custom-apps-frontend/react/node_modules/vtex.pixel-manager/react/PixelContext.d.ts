import hoistNonReactStatics from 'hoist-non-react-statics';
import React, { PureComponent } from 'react';
import type { PixelData } from './PixelEventTypes';
export interface PixelContextType {
    push: (data: PixelData) => void;
}
interface Props {
    currency: string;
}
export declare const PixelContext: React.Context<PixelContextType>;
export declare const usePixel: () => PixelContextType;
/**
 * withPixel is the HOC Component that provides an event subscription to the
 * Wrapped Component. This component will be used by the installed apps.
 */
export declare function withPixel<T>(WrappedComponent: React.ComponentType<T & PixelContextType>): React.FC<T> & hoistNonReactStatics.NonReactStatics<React.ComponentType<T & PixelContextType>, {}>;
declare class PixelProvider extends PureComponent<Props> {
    private pixelContextValue;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillUnmount(): void;
    /**
     * Push event to iframe
     */
    push: (data: PixelData) => void;
    render(): JSX.Element;
    private handleWindowMessage;
    private enhanceEvent;
    private handlePixelEvent;
}
declare const _default: {
    Pixel: typeof withPixel;
    withPixel: typeof withPixel;
    PixelProvider: typeof PixelProvider;
    usePixel: () => PixelContextType;
};
export default _default;
