import type { MaybeResponsiveInput } from 'vtex.responsive-values';
interface LayoutOption {
    name: string;
    component: string;
    itemsPerRow: MaybeResponsiveInput<number>;
}
interface State {
    mobileLayout?: string;
    showContentLoader?: boolean;
    isFetchingMore?: boolean;
    galleryLayouts?: LayoutOption[];
    selectedGalleryLayout?: string;
    /** For accessibility purposes */
    focusedGalleryLayout?: string;
}
interface InitialArgs {
    mobileLayout: string;
    showContentLoader: boolean;
    selectedGalleryLayout?: string;
}
declare type ReducerActions = {
    type: 'SWITCH_LAYOUT';
    args: {
        mobileLayout: string;
    };
} | {
    type: 'HIDE_CONTENT_LOADER';
} | {
    type: 'SET_FETCHING_MORE';
    args: {
        isFetchingMore: boolean;
    };
} | {
    type: 'SET_GALLERY_LAYOUTS';
    args: {
        galleryLayouts: LayoutOption[];
    };
} | {
    type: 'SWITCH_GALLERY_LAYOUT';
    args: {
        selectedGalleryLayout: string;
        focus?: boolean;
    };
} | {
    type: 'SET_FOCUS_GALLERY_LAYOUT';
    args: {
        focusedGalleryLayout: string;
    };
};
declare const _default: {
    SearchPageContext: import("react").Context<{}>;
    useSearchPage: () => {};
    SearchPageStateContext: import("react").Context<State>;
    useSearchPageState: () => State;
    SearchPageStateDispatch: import("react").Context<(_: ReducerActions) => void>;
    useSearchPageStateDispatch: () => (_: ReducerActions) => void;
    useSearchPageStateReducer: (initialState: InitialArgs) => [State, import("react").Dispatch<ReducerActions>];
};
export default _default;
