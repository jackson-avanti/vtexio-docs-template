import { FC } from 'react';
import { ResponsiveValuesTypes } from 'vtex.responsive-values';
interface AdjustOnResizeAction {
    type: 'ADJUST_ON_RESIZE';
    payload: {
        shouldCorrectItemPosition: boolean;
        slidesPerPage: number;
        navigationStep: number;
    };
}
interface SlideAction {
    type: 'SLIDE';
    payload: {
        transform?: number;
        currentSlide: number;
    };
}
interface TouchAction {
    type: 'TOUCH';
    payload: {
        transform?: number;
        isOnTouchMove: boolean;
    };
}
interface DisableTransitionAction {
    type: 'DISABLE_TRANSITION';
}
interface AdjustCurrentSlideAction {
    type: 'ADJUST_CURRENT_SLIDE';
    payload: {
        currentSlide: number;
        transform?: number;
    };
}
interface SyncSliderGroupAction {
    type: 'SYNC_SLIDER_GROUP';
    payload: {
        currentSlide: number;
        transform?: number;
    };
}
interface AdjustContextValuesAction {
    type: 'ADJUST_CONTEXT_VALUES';
    payload: {
        transformMap: State['transformMap'];
        slideWidth: State['slideWidth'];
        slidesPerPage: State['slidesPerPage'];
        transform: State['transform'];
        navigationStep: State['navigationStep'];
        totalItems: State['totalItems'];
    };
}
export interface SliderLayoutSiteEditorProps {
    infinite?: boolean;
    showNavigationArrows?: 'mobileOnly' | 'desktopOnly' | 'always' | 'never';
    showPaginationDots?: 'mobileOnly' | 'desktopOnly' | 'always' | 'never';
    usePagination?: boolean;
    fullWidth?: boolean;
    arrowSize?: ResponsiveValuesTypes.ResponsiveValue<number>;
}
export interface SliderLayoutProps {
    totalItems?: number;
    label?: string;
    slideTransition?: {
        /** Transition speed in ms */
        speed: number;
        /** Transition delay in ms */
        delay: number;
        timing: string;
    };
    autoplay?: {
        /** Timeout duration in ms */
        timeout: number;
        stopOnHover?: boolean;
    };
    navigationStep?: number | 'page';
    itemsPerPage?: ResponsiveValuesTypes.ResponsiveValue<number>;
    centerMode?: ResponsiveValuesTypes.ResponsiveValue<'center' | 'to-the-left' | 'disabled'>;
    centerModeSlidesGap?: number;
}
interface State extends Partial<SliderLayoutProps> {
    /** Width of each slide */
    slideWidth: number;
    /** Number of slides to show per page */
    slidesPerPage: number;
    /** Index of the leftmost slide of the current page */
    currentSlide: number;
    /** Current transform value */
    transform: number;
    /** Total number of slides */
    totalItems: number;
    /** Number of slides to slide in navigation */
    navigationStep: number;
    /** Whether or not navigationStep prop is set to 'page' */
    isPageNavigationStep: boolean;
    /** Whether or not a touchmove event is happening */
    isOnTouchMove: boolean;
    useSlidingTransitionEffect: boolean;
    transformMap: Record<number, number>;
    slideTransition: Exclude<SliderLayoutProps['slideTransition'], undefined>;
}
interface SliderContextProps extends SliderLayoutProps {
    totalItems: number;
    itemsPerPage: number;
    infinite: SliderLayoutSiteEditorProps['infinite'];
}
declare type Action = AdjustOnResizeAction | SlideAction | TouchAction | DisableTransitionAction | AdjustCurrentSlideAction | AdjustContextValuesAction | SyncSliderGroupAction;
declare type Dispatch = (action: Action) => void;
declare const SliderContextProvider: FC<SliderContextProps>;
declare function useSliderState(): State;
declare function useSliderDispatch(): Dispatch;
export { SliderContextProvider, useSliderDispatch, useSliderState };
