/// <reference types="react" />
import type { ResponsiveValuesTypes } from 'vtex.responsive-values';
import type { CssHandlesTypes } from 'vtex.css-handles';
declare const CSS_HANDLES: readonly ["image", "imageWrapper", "imageContainer", "product", "imagePlaceholder", "mainImageHovered"];
declare type ImageLabelMatchCriteria = 'exact' | 'contains';
declare type MainImageLabel = {
    label?: string;
    labelMatchCriteria?: ImageLabelMatchCriteria;
};
declare type HoverImageCriteria = 'label' | 'index';
declare type HoverImage = {
    label?: string;
    index?: number;
    criteria?: HoverImageCriteria;
    labelMatchCriteria?: ImageLabelMatchCriteria;
};
interface Props {
    /**
     * Set the discount badge's visibility
     * @default true
     */
    showBadge?: boolean;
    /** Text shown on badge */
    badgeText?: string;
    /**
     * Display mode of the summary
     * @default "normal"
     */
    displayMode?: 'normal' | 'inline';
    /**
     * @default ""
     */
    mainImageLabel?: string | MainImageLabel;
    /**
     * @default ""
     * @deprecated
     * Use hoverImage instead
     */
    hoverImageLabel?: string;
    hoverImage?: HoverImage;
    /**
     * Defines if the collection badges are shown
     * @default false
     */
    showCollections?: boolean;
    placeholder?: string;
    width?: ResponsiveValuesTypes.ResponsiveValue<number | string>;
    height?: ResponsiveValuesTypes.ResponsiveValue<number | string>;
    aspectRatio?: ResponsiveValuesTypes.ResponsiveValue<string | number>;
    maxHeight?: ResponsiveValuesTypes.ResponsiveValue<string>;
    classes?: CssHandlesTypes.CustomClasses<typeof CSS_HANDLES>;
    fetchpriority?: 'high' | 'low' | 'auto' | 'byPosition';
}
declare function ProductImage({ showBadge, badgeText, displayMode, mainImageLabel, hoverImageLabel, hoverImage, showCollections, placeholder, width: widthProp, height: heightProp, aspectRatio: aspectRatioProp, maxHeight: maxHeightProp, classes, fetchpriority, }: Props): JSX.Element;
declare namespace ProductImage {
    var schema: {
        title: string;
        description: string;
        type: string;
        properties: {
            showBadge: {
                type: string;
                title: string;
                default: boolean;
                isLayout: boolean;
            };
            showCollections: {
                type: string;
                title: string;
                default: boolean;
                isLayout: boolean;
            };
            displayMode: {
                title: string;
                type: string;
                enum: string[];
                default: string;
                isLayout: boolean;
            };
            hoverImageLabel: {
                title: string;
                description: string;
                type: string;
                default: string;
                isLayout: boolean;
            };
            hoverImage: {
                type: string;
                properties: {
                    criteria: {
                        title: string;
                        enum: string[];
                    };
                };
                dependencies: {
                    criteria: {
                        oneOf: ({
                            properties: {
                                criteria: {
                                    enum: string[];
                                };
                                index: {
                                    title: string;
                                    type: string;
                                };
                                label?: undefined;
                                labelMatchCriteria?: undefined;
                            };
                        } | {
                            properties: {
                                criteria: {
                                    enum: string[];
                                };
                                label: {
                                    title: string;
                                    type: string;
                                };
                                labelMatchCriteria: {
                                    title: string;
                                    widget: {
                                        'ui:widget': string;
                                    };
                                    type: string;
                                    enum: string[];
                                    default: string;
                                };
                                index?: undefined;
                            };
                        })[];
                    };
                };
            };
            fetchpriority: {
                title: string;
                enum: string[];
                enumNames: string[];
                widget: {
                    'ui:widget': string;
                };
                default: string;
            };
        };
    };
}
export default ProductImage;
