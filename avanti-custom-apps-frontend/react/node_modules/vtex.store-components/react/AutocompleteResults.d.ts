import type { RefObject } from 'react';
import type { CssHandlesTypes } from 'vtex.css-handles';
import type { PropGetters } from 'downshift';
import './AutocompleteResults.css';
declare const CSS_HANDLES: readonly ["resultsItem", "resultsList", "searchTerm", "resultsItemImage", "spinnerContainer", "spinnerInnerContainer", "resultsItemName"];
export declare type Props = {
    parentContainer?: RefObject<HTMLElement>;
    /** Downshift specific prop */
    highlightedIndex: number | null;
    /** Search query */
    inputValue: string;
    /** A template for a custom url. It can have a substring ${term} used as placeholder to interpolate the searched term. (e.g. `/search?query=${term}`) */
    customSearchPageUrl?: string;
    isOpen?: boolean;
    attemptPageTypeSearch?: boolean;
    /** Closes the options box. */
    closeMenu: () => void;
    /** Clears the input */
    onClearInput: () => void;
    /** Downshift function */
    getItemProps: PropGetters<AutocompleteItem | {
        term: string;
    }>['getItemProps'];
    getMenuProps: PropGetters<AutocompleteItem | {
        term: string;
    }>['getMenuProps'];
    /** Used to override default CSS handles */
    classes?: CssHandlesTypes.CustomClasses<typeof CSS_HANDLES>;
};
declare type AutocompleteItem = {
    thumb: string;
    name: string;
    href: string;
    slug: string;
    criteria: string;
    productId: string;
};
/** List of search results to be displayed */
declare function AutocompleteResults({ parentContainer, isOpen, inputValue, closeMenu, onClearInput, getItemProps, getMenuProps, highlightedIndex, attemptPageTypeSearch, customSearchPageUrl, classes, }: Props): JSX.Element;
export default AutocompleteResults;
