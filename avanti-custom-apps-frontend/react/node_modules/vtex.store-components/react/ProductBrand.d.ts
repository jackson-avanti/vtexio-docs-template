/// <reference types="react" />
import type { CssHandlesTypes } from 'vtex.css-handles';
declare type DisplayModeOptions = 'logo' | 'text';
declare type WithLinkOptions = 'none' | 'logo' | 'text' | 'logoAndText';
export declare const PRODUCT_BRAND_CSS_HANDLES: readonly ["productBrandContainer", "productBrandLogo", "productBrandLogoWrapper", "productBrandLogoLink", "productBrandLogoSpacer", "productBrandNameSpacer", "productBrandNameLink", "productBrandName"];
export interface ProductBrandProps {
    /** The brand name. If no value is declared, the product context should provide the data. */
    brandName?: string;
    /** The brand ID.  If no value is declared, the product context should provide the data. */
    brandId?: number;
    /** This will define if the product brand will be displayed by text or logo */
    displayMode?: DisplayModeOptions;
    /** This will define if the loading placeholder should have the size of the logo or the text */
    loadingPlaceholder?: DisplayModeOptions;
    /** This prop should only be used when `displayMode` is set to `logo`.
     * It defines what should be done when the Product Brand was set to display a brand logo
     * but no image was registered in the VTEX admin's Catalog
     * */
    fallbackToText?: boolean;
    /** The brand names or brand IDs listed in the array will never be displayed by the Brand component.
     * It is usually useful to hide default or test brand names/logos on the store front
     * */
    excludeBrands?: Array<string | number>;
    /** It sets the logo height. It should only be used when `displayMode` is set to `logo` */
    height?: number;
    /** @deprecated use withLink instead */
    logoWithLink?: boolean;
    /** Defines the scenarios in which the product brand should have a link that leads to its website. */
    withLink?: WithLinkOptions;
    /** Used to override default CSS handles */
    classes?: CssHandlesTypes.CustomClasses<typeof PRODUCT_BRAND_CSS_HANDLES>;
    blockClass?: string;
}
/**
 * The `ProductBrand` is a VTEX block that displays either the **name** or the **logo** of a **product's brand**.
 */
declare function ProductBrand({ displayMode, fallbackToText, loadingPlaceholder, 
/** TODO: decide whether the prop width should be supported
 * It makes sense at surface, but setting both width and height
 * messes with the alignment of the logo, due to how our image
 * server handles resizing. */
height, excludeBrands, logoWithLink, withLink, brandName: brandNameProp, brandId: brandIdProp, classes, }: ProductBrandProps): JSX.Element | null;
export default ProductBrand;
