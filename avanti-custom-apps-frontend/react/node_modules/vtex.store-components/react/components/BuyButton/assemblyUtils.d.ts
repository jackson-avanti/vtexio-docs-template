declare type GroupId = string;
declare type GroupTypes = 'SINGLE' | 'TOGGLE' | 'MULTIPLE';
export declare const sumAssembliesPrice: (assemblyOptions: Record<GroupId, AssemblyOptionItem[]>) => number;
interface AssemblyOptionItem {
    price: number;
    choiceType: GroupTypes;
    children: Record<GroupId, AssemblyOptionItem[]> | null;
    name: string;
    id: string;
    initialQuantity: number;
    quantity: number;
    seller: string;
}
declare type InputValue = Record<string, string | boolean>;
export interface AssemblyOptions {
    items: Record<GroupId, AssemblyOptionItem[]>;
    inputValues: Record<GroupId, InputValue>;
    areGroupsValid: Record<string, boolean>;
}
declare type Option = ItemOption | InputValuesOption;
export interface ItemOption {
    assemblyId: string;
    id: string;
    quantity: number;
    seller: string;
    options?: Option[];
}
export interface InputValuesOption {
    assemblyId: string;
    inputValues: InputValue;
}
interface AddedItem {
    id: string;
    name: string;
    quantity: number;
    sellingPrice: number;
    sellingPriceWithAssemblies: number;
    assemblyOptions?: ParsedAssemblyOptionsMeta;
}
interface CartAddedOption {
    normalizedQuantity: number;
    extraQuantity: number;
    choiceType: GroupTypes;
    item: AddedItem;
}
interface CartRemovedOption {
    name: string;
    initialQuantity: number;
    removedQuantity: number;
}
interface ParsedAssemblyOptionsMeta {
    added: CartAddedOption[];
    removed: CartRemovedOption[];
    parentPrice: number;
}
interface ParsedAssemblyOptions {
    options: Option[];
    assemblyOptions: ParsedAssemblyOptionsMeta;
}
export declare const transformAssemblyOptions: (assemblyOptionsItems: Record<string, AssemblyOptionItem[]> | undefined, inputValues: Record<string, Record<string, string | boolean>> | undefined, parentPrice: number, parentQuantity: number) => ParsedAssemblyOptions;
export {};
