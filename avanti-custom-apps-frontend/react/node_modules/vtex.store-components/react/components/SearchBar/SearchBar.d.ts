/// <reference types="react" />
import { DownshiftProps } from 'downshift';
export declare const CSS_HANDLES: readonly ["searchBarInnerContainer"];
interface Props {
    /** Placeholder to be used on the input */
    placeholder: string;
    /** Current value of the input */
    inputValue: string;
    /** Function to handle input changes */
    onInputChange: DownshiftProps<any>['onChange'];
    /** Function to direct the user to the searchPage */
    onGoToSearchPage: () => void;
    /** Function to clear the input */
    onClearInput: () => void;
    /** Indentify when use the compact version of the component */
    compactMode?: boolean;
    /** Identify if the search icon is on left or right position */
    hasIconLeft?: boolean;
    /** Custom classes for the search icon */
    iconClasses?: string;
    /** Block class for the search icon */
    iconBlockClass?: string;
    /** Identify if the search input should autofocus or not */
    autoFocus?: boolean;
    /** Max width of the search bar */
    maxWidth?: string | number;
    /** A template for a custom url. It can have a substring ${term} used as placeholder to interpolate the searched term. (e.g. `/search?query=${term}`) */
    customSearchPageUrl?: string;
    /** Uses the term the user has inputed to try to navigate to the proper
     * page type (e.g. a department, a brand, a category)
     */
    attemptPageTypeSearch?: boolean;
    autocompleteAlignment?: 'right' | 'left' | 'center';
    /** Identify if autocomplete should be open on input focus or not */
    openAutocompleteOnFocus?: boolean;
    /** Identify if input should blur on submit */
    blurOnSubmit?: boolean;
    /** Identify if icon should submit on click */
    submitOnIconClick?: boolean;
    /** Minimum search term length allowed */
    minSearchTermLength?: number;
    /** If true, the autocomplete will fill the whole window horizontally */
    autocompleteFullWidth?: boolean;
    /** The type of the search input */
    inputType?: 'text' | 'search';
    /** Define the component display mode,such as which buttons should be visible */
    displayMode?: 'clear-button' | 'search-and-clear-buttons' | 'search-button';
    /** Define how the autocomplete component should be displayed. Possible values are: `overlay` (suggestions overlapping other components) and `container` (displays the suggestion within a container). */
    containerMode: 'overlay' | 'container';
    /** The autocomplete can have touchable/clickable components. Interacting with those components may trigger blur and touch events that will close the autcomplete. When set to true, this prop will disable those handlers */
    disableBlurAndTouchEndHandler?: boolean;
}
declare function SearchBar({ placeholder, onInputChange, onGoToSearchPage, onClearInput, inputValue, compactMode, hasIconLeft, iconClasses, iconBlockClass, autoFocus, maxWidth, attemptPageTypeSearch, customSearchPageUrl, autocompleteAlignment, openAutocompleteOnFocus, blurOnSubmit, submitOnIconClick, displayMode, minSearchTermLength, autocompleteFullWidth, inputType, containerMode, disableBlurAndTouchEndHandler, }: Props): JSX.Element;
export default SearchBar;
