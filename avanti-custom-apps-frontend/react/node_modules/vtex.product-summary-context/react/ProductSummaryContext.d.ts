import { PropsWithChildren } from 'react';
import { Product, SingleSKU, SponsoredBadgeOptions, State } from './ProductSummaryTypes';
declare type Dispatch = (action: Action) => void;
declare type SetProductAction = {
    type: 'SET_PRODUCT';
    args: {
        product: Product;
        selectedItem?: SingleSKU;
    };
};
declare type SetProductQueryAction = {
    type: 'SET_PRODUCT_QUERY';
    args: {
        query: string;
    };
};
declare type SetHoverAction = {
    type: 'SET_HOVER';
    args: {
        isHovering: boolean;
    };
};
declare type SetLoadingAction = {
    type: 'SET_LOADING';
    args: {
        isLoading: boolean;
    };
};
declare type SetPriceLoadingAction = {
    type: 'SET_PRICE_LOADING';
    args: {
        isPriceLoading: boolean;
    };
};
declare type SetProductQuantity = {
    type: 'SET_QUANTITY';
    args: {
        quantity: number;
    };
};
declare type SetInView = {
    type: 'SET_IN_VIEW';
    args: {
        inView: boolean;
    };
};
declare type SetPosition = {
    type: 'SET_POSITION';
    args: {
        position: number;
    };
};
declare type Action = SetProductAction | SetHoverAction | SetLoadingAction | SetPriceLoadingAction | SetProductQuantity | SetProductQueryAction | SetInView | SetPosition;
export declare function reducer(state: State, action: Action): State;
interface ProviderProps {
    product: Product;
    selectedItem?: SingleSKU;
    isLoading?: boolean;
    isPriceLoading?: boolean;
    listName?: string;
    sponsoredBadge?: SponsoredBadgeOptions;
}
declare function ProductSummaryProvider({ product, selectedItem, isLoading, isPriceLoading, listName, sponsoredBadge, children, }: PropsWithChildren<ProviderProps>): JSX.Element;
declare function useProductSummaryDispatch(): Dispatch;
declare function useProductSummary(): State;
declare const _default: {
    ProductSummaryProvider: typeof ProductSummaryProvider;
    useProductSummary: typeof useProductSummary;
    useProductSummaryDispatch: typeof useProductSummaryDispatch;
};
export default _default;
